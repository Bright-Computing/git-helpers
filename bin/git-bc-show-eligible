#!/usr/bin/env python
# coding=utf-8

from __future__ import unicode_literals

import subprocess
import argparse
import pygit2
import sys
import re
import typing
import os

EXCLUDES_PATH = os.path.join(os.path.expanduser("~"), '.excludes_show_eligible')

def find_toplevel():
    try:
        return subprocess.check_output(
            ['git', 'rev-parse', '--show-toplevel'],
            stderr=subprocess.PIPE
        ).rstrip()
    except subprocess.CalledProcessError:
        return None

def find_unpicked(repo, from_commit, to_commit, since_commit, show_all):
    base_id = repo.merge_base(from_commit.id, to_commit.id)

    cherrypick_re = re.compile('(cherry picked from commit|with child) ([0-9a-fA-F]+)')
    cherrypicked_commits = set()

    for commit in repo.walk(to_commit.id, pygit2.GIT_SORT_TOPOLOGICAL):
        if commit.id == base_id:
            break

        for match in cherrypick_re.findall(commit.message):
            cherrypicked_commits.add(match[1])

    user_names = set(repo.config.get_multivar('user.name'))
    user_emails = set(repo.config.get_multivar('user.email'))

    if not user_names and not user_emails and not show_all:
        print('No user.name or user.email in git config, can not show user-specific commits')
        sys.exit(1)

    for commit in repo.walk(from_commit.id, pygit2.GIT_SORT_TOPOLOGICAL):
        # we walk from newest commits to oldest
        if commit.id == base_id:
            break

        if str(commit.id) not in cherrypicked_commits and \
                (show_all or commit.author.name in user_names or
                 commit.author.email in user_emails):
            yield(commit)

        if since_commit and commit.id == since_commit.id:
            break

def read_excludes() -> typing.List[str]:
    if not os.path.isfile(EXCLUDES_PATH):
        return []
    with open(EXCLUDES_PATH, 'r') as f:
        return f.read().splitlines()

def add_exclude_hash(excludes: typing.List[str], commit: str) -> None:
    if commit in excludes:
        print(f'Commit {commit} already in the exclude list ({EXCLUDES_PATH}).')
        sys.exit(1)
    with open(EXCLUDES_PATH, 'at') as f:
        f.write(commit + '\n')
    print(f'Hash {commit} added successfully.')
    exit(0)

def main():
    parser = argparse.ArgumentParser(description='Show commits, eligible for cherry-picking')
    parser.add_argument('branch', metavar='BRANCH', help='Name for the branch to check against',
                        default='origin/master', nargs='?')
    parser.add_argument('target_branch', metavar='TARGET_BRANCH', help='Name for the target branch',
                        default='HEAD', nargs='?')
    parser.add_argument('--since', metavar='COMMIT', help='Start checking since specified commit')
    parser.add_argument('--all', action='store_true', help='Show commits from all users')
    parser.add_argument('--add-to-exclude-list', metavar='COMMIT', help='Add a merge commit hash so it, '
                        f'and its children, no longer are displayed in the output. This is saved in "{EXCLUDES_PATH}".')

    top = find_toplevel()
    excludes = read_excludes()

    if not top:
        print('The current folder is not a valid git repository')
        sys.exit(1)

    args = parser.parse_args()
    repo = pygit2.Repository(top)

    if args.add_to_exclude_list:
        add_exclude_hash(excludes, args.add_to_exclude_list)

    try:
        from_commit = repo.revparse_single(args.branch)
    except:
        print('Invalid branch %s' % args.branch)
        sys.exit(1)

    try:
        to_commit = repo.revparse_single(args.target_branch)
    except:
        print('Invalid target branch %s' % args.target_branch)
        sys.exit(1)

    if not repo.merge_base(from_commit.id, to_commit.id):
        print('%s and %s does not have common ancestor' % (args.branch, args.target_branch))
        sys.exit(1)

    since_commit = None
    if args.since:
        try:
            since_commit = repo.revparse_single(args.since)
        except:
            print('Invalid since %s' % args.since)
            sys.exit(1)

    author_format_str = ' | %s <%s>'
    commit_format_str = '%s %s%s'

    if sys.stdout.isatty():
        author_format_str = ' \033[31m| %s <%s>\033[0m'
        commit_format_str = '\033[33m%s\033[0m %s%s'

    seen = ''
    groups = []
    current_group = []
    for commit in find_unpicked(repo, from_commit, to_commit, since_commit, args.all):
        author_info = ''
        if args.all:
            author_info = author_format_str % (commit.author.name, commit.author.email)

        commit_msg = commit.message[:commit.message.index('\n')]
        indent = commit_msg in seen
        seen += commit.message

        commit_string = (commit_format_str % (str(commit.id), commit_msg, author_info))

        if indent:
            current_group.append(commit_string)
        else:
            if current_group:
                groups.append(current_group)
            current_group = [commit_string]

    if current_group:
        groups.append(current_group)

    for group in groups:
        merge = group[0]
        child_commits = group[1:-1]
        last_child_commit = group[-1] if len(group) > 1 else ''

        if [e for e in excludes if e in merge]:
            continue

        print(merge)

        for child in child_commits:
           print(" ├─ {}".format(child))

        if last_child_commit:
           print(" └─ {}".format(last_child_commit))


if __name__ == '__main__':
        main()
