#!/bin/sh
set -e

USAGE="\
git bc-cherry-pick

Interactively cherry-pick a commit onto the current branch. In presence of
unambiguous parents, it does not ask user intervention. By default it also
commits.

Usage:
    git bc-cherry-pick [options] <commit-id>

Options:
    -n, --no-commit     Stage changes but do not commit
    --dry-run           Review commands to be executed
"
SCRIPT=`readlink -f $0`
DIR=`dirname $SCRIPT`
CHERRY_PICK_OPTIONS="-x"

. $DIR/bc-env.sh

DRY_RUN=0
COMMIT=1

while [ $# -gt 0 ]; do
    ARG=$1
    case "$ARG" in
    --help|-h)
        HELP=1
        ;;
    --no-commit|-n)
        COMMIT=0
        ;;
    --dry-run)
        DRY_RUN=1
        ;;
    --*)
        die "unrecognised option: $ARG" ;;
    *)
        COMMIT_ID=$1
        ;;
    esac
    shift
done

if [ "$HELP" -eq 1 ] || [ -z "$COMMIT_ID" ]; then
    usage
fi

if [ "$DRY_RUN" -eq 1 ]; then
    exec_cmd()
    {
        echo $@
    }
else
    exec_cmd()
    {
        $@
    }
fi
if [ "$COMMIT" -ne 1 ]; then
    CHERRY_PICK_OPTIONS="$CHERRY_PICK_OPTIONS --no-commit"
fi


PARENTS=`git show --summary --format="%P" $COMMIT_ID | head -1`
PARENTS_ARRAY=`echo $PARENTS | tr ";" "\n"`
PARENTS_COUNT=`echo $PARENTS | wc -w`

if [ "$PARENTS_COUNT" -gt 2 ]; then
    echo "Number of parents greater than 2 is unsupported"
    echo "    parents: $PARENTS"
    exit 1
fi

if [ "$PARENTS_COUNT" -eq 1 ]; then
    echo "This is a regular commit => regular cherry-pick"
    exec_cmd git cherry-pick $CHERRY_PICK_OPTIONS $COMMIT_ID
    exit 0
fi

echo "This is a merge commit"
COMMON_ANCESTOR=`git merge-base $PARENTS`

COUNT=1
for PARENT in $PARENTS_ARRAY; do
    if [ "$PARENT" = "$COMMON_ANCESTOR" ]; then
        MAINLINE=COUNTER
        break;
    fi
    COUNTER=$(($COUNTER+1))
done
if [ ! -z "$MAINLINE" ]; then
    echo "This is an empty merge commit => the branch to apply is implicit"
    exec_cmd git cherry-pick $CHERRY_PICK_OPTIONS -m $MAINLINE $COMMIT_ID
    exit 0
fi

PROMPT="\
Select one option to review the state or the branch to apply:
    graph)      review the commit graph
    commits)    review the list of commits
    diff)       review the diff
    1|2)        select the branch to be applied (1 or 2)
    help)       show this message
    quit)       abort
"
echo "$PROMPT"
while true; do
    read -p "Selection (<NUM>/g/c/d/h/q) " SEL
    case "$SEL" in
        [gG]|graph|GRAPH)
            git bc-log "$COMMON_ANCESTOR^..$COMMIT_ID"
            ;;
        [cC]|commits|COMMITS)
            COUNTER=1
            for PARENT in $PARENTS_ARRAY; do
                echo "Branch $COUNTER:"
                git --no-pager log --oneline "$COMMON_ANCESTOR..$PARENT"
                echo ""
                COUNTER=$(($COUNTER+1))
            done
            ;;
        [dD]|diff|DIFF)
            COUNTER=1
            for PARENT in $PARENTS_ARRAY; do
                echo "Branch $COUNTER:"
                git --no-pager diff "$COMMON_ANCESTOR..$PARENT"
                echo ""
                COUNTER=$(($COUNTER+1))
            done
            ;;
        1)
            MAINLINE=2
            break;
            ;;
        2)
            MAINLINE=1
            break;
            ;;
        [hH]|help|HELP)
            echo "$PROMPT"
            ;;
        [qQ]|quit|QUIT)
            echo "Aborting"
            exit 1
            ;;
        *)
            echo "Invalid selection"
            ;;
    esac
done

echo "Apply commits with mainline $MAINLINE"
exec_cmd git cherry-pick $CHERRY_PICK_OPTIONS -m $MAINLINE $COMMIT_ID
