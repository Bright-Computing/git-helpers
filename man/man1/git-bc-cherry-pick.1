.\" Automatically generated by Pandoc 1.18
.\"
.TH "git-bc-cherry-pick" "1"
.hy
.SH git\-bc\-cherry\-pick(1) \-\- Apply the changes introduced by some
existing commits
.SS SYNOPSIS
.PP
\f[C]git\ bc\-cherry\-pick\f[] []
.SS DESCRIPTION
.PP
Given an existing commit, apply the changes it introduced, recording a
new commit in the current branch.
This requires your working tree to be clean (no modifications from the
HEAD commit).
.PP
The command applies a standard git\-cherry\-pick(1) with the given
commit.
It works the same way, except that in case the given commit is a merge,
it asks interactively what is the branch to consider in the cherry pick.
By default it does not commit, but only stages the changes, so it allows
you to review them.
.PP
In case the command can\[aq]t figure out what branch to apply
automatically, this is the prompt it presents to you:
.IP
.nf
\f[C]
This\ is\ a\ merge\ commit
Select\ one\ option\ to\ review\ the\ state\ or\ the\ branch\ to\ apply:
\ \ \ \ graph)\ \ \ \ \ \ review\ the\ commit\ graph
\ \ \ \ commits)\ \ \ \ review\ the\ list\ of\ commits
\ \ \ \ diff)\ \ \ \ \ \ \ review\ the\ diff
\ \ \ \ 1|2)\ \ \ \ \ \ \ \ select\ the\ branch\ to\ be\ applied\ (1\ or\ 2)
\ \ \ \ help)\ \ \ \ \ \ \ show\ this\ message
\ \ \ \ quit)\ \ \ \ \ \ \ abort

Selection\ (<NUM>/g/c/d/h/q)
\f[]
.fi
.PP
Options \f[C]graph\f[], \f[C]commits\f[] and \f[C]diff\f[] gives an
overview of the branches to be considered, \f[C]1\f[] selects the first
branch and \f[C]2\f[] the second one.
Option \f[C]q\f[] is to abort the cherry\-pick.
.PP
If conflicts arise, you will need to resolve them by editing the files
and adding them with git\-add(1) and continue the cherry\-pick with
git\-cherry\-pick(1) with the \f[C]\-\-continue\f[] option.
You can use git\-status(1) to be guided through this process.
.SS OPTIONS
.IP \[bu] 2
\f[C]\-n\f[], \f[C]\-\-no\-commit\f[]: Stage changes if the cherry\-pick
succedes, but do not commit.
.IP \[bu] 2
\f[C]\-\-dry\-run\f[]: Do not actually execute the git commands, but
only print them.
.IP \[bu] 2
\f[C]<commit>\f[]: The SHA\-1 identifier of the commit to use for the
cherry\-pick.
See gitrevisions(7).
This parameter is mandatory.
.SS EXAMPLES
.PP
Suppose to have this history:
.IP
.nf
\f[C]
\ \ \ \ \ .\-\-\-B\-\-\-C\-\-\-D\-\-\-
\ \ \ \ /\ \ \ /\ \ \ \ \ \ \ /
\-\-\-A\ \ \ /\ \ \ \ \ \ \ /
\ \ \ \ \\\ /\ \ \ \ \ \ \ /
\ \ \ \ \ E\-\-\-\-\-\-\-F

\-\-\-G\-\-\-H
\f[]
.fi
.PP
The commits are:
.IP \[bu] 2
A is the common ancestor between two branches.
.IP \[bu] 2
Commits B, C, D are part of the master branch.
.IP \[bu] 2
Commits E, F are part of a feature branch.
.IP \[bu] 2
Commits B and D are merge commits between the two branches.
They are however different, because D is a normal merge bringing
together commits B, C and F, while B has been created with
\f[C]\-\-ff\-only\ option\f[], so even if master hasn\[aq]t changed in
the meantime, instead of fast forwarding master to E, a new merge commit
has been created.
.IP \[bu] 2
Commits G, H are commits of a release branch (H is its last commit).
.PP
You want to cherry pick onto the release branch one of the commits in
the other two branches.
The other two branches are not affected.
The end result for the release branch will be this in all the examples:
.IP
.nf
\f[C]
\-\-\-G\-\-\-H\-\-\-I
\f[]
.fi
.PP
If you want to cherry\-pick the commit F:
.IP
.nf
\f[C]
$\ git\ bc\-cherry\-pick\ F

The\ command\ will\ simply\ cherry\ pick\ the\ commit\ and\ create\ I,\ without\ user
interaction.
\f[]
.fi
.PP
If you want to cherry\-pick the commit B:
.IP
.nf
\f[C]
$\ git\ bc\-cherry\-pick\ B

The\ command\ will\ simply\ cherry\ pick\ the\ commit\ and\ create\ I,\ without\ user
interaction.\ This\ is\ possible\ because\ she\ branch\ to\ select\ is\ unambiguosly
the\ one\ containing\ E,\ since\ the\ other\ one\ is\ empty\ (i.e.\ there\ are\ no
commits\ between\ A\ (common\ ancestor)\ and\ B.
\f[]
.fi
.PP
If you want to cherry\-pick the commit D, with the commits introduced in
the feature branch:
.IP
.nf
\f[C]
$\ git\ bc\-cherry\-pick\ D

The\ command\ will\ stop\ asking\ user\ interaction,\ because\ it\ doesn\[aq]t\ know\ which
branch\ to\ apply.\ The\ choice\ is\ between\ commits\ E,\ F,\ or\ B,\ C.\ In\ this\ case
we\ want\ E,\ F.\ To\ do\ so,\ we\ get\ the\ branch\ number\ by\ selecting\ `c`\ in\ the
selection\ prompt.\ The\ outupt\ will\ be\ this:

Branch\ 1:
C\ message\ 2
B\ message\ 1

Branch\ 2:
E\ message\ 3
F\ message\ 4

In\ this\ case\ we\ need\ to\ input\ `2`\ to\ select\ the\ second\ branch.
\f[]
.fi
.SS SEE ALSO
.PP
git\-cherry\-pick(1)
